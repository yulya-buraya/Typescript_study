/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2022 TwelveTone LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
const assert = require('assert');

const PrettyPrinter = require('../src/index').PrettyPrinter;
const prettyPrint = require('../src/index').prettyPrint;
const Options = require('../src/index').Options;
const createParser = require('../src/index').createParser;


describe('Printer', function () {

  const src = '[1 2 3]';
  const src2 = '[a b c]';

  describe('JSON', function () {

    it('should print JSON', function () {
      const printer = new PrettyPrinter(PrettyPrinter.Options.Companion.JsonCompact);
      const res = printer.stringToString(src);
      assert.equal(res, '[1,2,3]')
    });

    it('should print JSON', function () {
      const printer = new PrettyPrinter(PrettyPrinter.Options.Companion.JsonCompact);
      const res = printer.stringToString(src2);
      assert.equal(res, '["a","b","c"]')
    });

  });

  describe('RJSON', function () {

    it('should print RJSON', function () {
      const printer = new PrettyPrinter(PrettyPrinter.Options.Companion.RJsonCompact);
      const res = printer.stringToString(src);
      assert.equal(res, '[1 2 3]')
    });

    it('should print RJSON', function () {
      const printer = new PrettyPrinter(PrettyPrinter.Options.Companion.RJsonCompact);
      const res = printer.stringToString(src2);
      assert.equal(res, '[a b c]')
    });

  });

  describe('RJSON Empty Strings', function () {

    it('should print empty key in RJSON output', function () {
      const printer = new PrettyPrinter(PrettyPrinter.Options.Companion.RJsonCompact);
      const res = printer.stringToString('{"": true}');
      assert.equal(res, "{'':true}");
    })

    it('should print empty value in RJSON output', function () {
      const printer = new PrettyPrinter(PrettyPrinter.Options.Companion.RJsonCompact);
      const res = printer.stringToString('{"foo":""}');
      assert.equal(res, "{foo:''}");
    });

    it('should print empty strings in RJSON array output', function () {
      const printer = new PrettyPrinter(PrettyPrinter.Options.Companion.RJsonCompact);
      const res = printer.stringToString('["", true, ""]');
      assert.equal(res, "['' true '']");
    });

    it('should print empty strings in JSON array output', function () {
      const printer = new PrettyPrinter(PrettyPrinter.Options.Companion.JsonCompact);
      const res = printer.stringToString("['' true '']");
      assert.equal(res, '["",true,""]');
    });

    it('should print decimal value in JSON array output', function () {
      const printer = new PrettyPrinter(PrettyPrinter.Options.Companion.JsonCompact);
      const res = printer.stringToString('{"a":1.1}');
      assert.equal(res, '{"a":1.1}');
    });

    it('should print decimal value in RJSON array output', function () {
      const printer = new PrettyPrinter(PrettyPrinter.Options.Companion.RJsonCompact);
      const res = printer.stringToString('{"a":1.1}');
      assert.equal(res, '{a:1.1}');
    });

    it('should print integer value in JSON array output', function () {
      const printer = new PrettyPrinter(PrettyPrinter.Options.Companion.JsonCompact);
      const res = printer.stringToString('{"a":1}');
      assert.equal(res, '{"a":1}');
    });

    it('should print integer value in RJSON array output', function () {
      const printer = new PrettyPrinter(PrettyPrinter.Options.Companion.RJsonCompact);
      const res = printer.stringToString('{"a":1}');
      assert.equal(res, '{a:1}');
    });
  });

  describe('prettyPrint', function () {

    it('should print string', function () {
      const val = prettyPrint(Options.JsonCompact, "[a b c]");
      assert.equal('["a","b","c"]', val)
    });

    it('should print value', function () {
      const parsedValue = createParser().stringToValue('[a b c]');
      const val = prettyPrint(Options.JsonCompact, parsedValue);
      assert.equal('["a","b","c"]', val)
    });

  });
});
