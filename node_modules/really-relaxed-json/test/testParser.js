/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2022 TwelveTone LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
const assert = require('assert');

const parser = require('../src/index').createParser();


describe('Parser', function () {

  describe('Strings', function () {
    it('should parse single letter e', function () {
      parse('e', '"e"')
    });

    it('should parse single letter strings', function () {
      parse('a', '"a"')
      parse('f', '"f"')
      parse('g', '"g"')
      // The 'e' case was giving us problems
      parse('e', '"e"')
      parse('[a b c d e]', '["a","b","c","d","e"]')
    });
  });

  describe('Lists', function () {

    const expected = "[1,2,3]";

    it('should parse standard commas', function () {
      parse("[1,2,3]", expected);
    });

    it('should parse dangling commas', function () {
      parse("[1,2,3,]", expected);
    });

    it('should parse no commas', function () {
      parse("[1 2 3]", expected);
    });

    it('should parse optional commas', function () {
      parse("[1, 2 3,]", expected);
    });
  });

  describe('Objects', function () {

    const expected = '{"foo":[1,"one",true,null]}';

    it('should parse standard object', function () {
      parse('{"foo" : [1, "one", true, null]}', expected);
    });

    it('parse dangling commas', function () {
      parse('{"foo" : [1, "one", true, null,]}', expected);
    });

    it('parse no quotes', function () {
      parse('{foo:[1,one,true,null]}', expected);
    });
  });

  describe('Comments', function () {

    const expected = '["hello"]';

    it('should ignore singleline comment', function () {
      parse('[hello]// this is a comment', expected);
    });

    it('should ignore multiline comment', function () {
      parse('/* a comment \n\n*/ [hello] /* a comment */', expected);
    });
  });

  describe('Quotes', function () {

    const expected = '["hello","world"]';

    it('should accept no quotes', function () {
      parse('[hello,world]', expected);
    });

    it('should accept no quotes or commas', function () {
      parse('[hello world]', expected);
    });
  });
});

function parse(rjsonString, expected) {
  const json = parser.stringToJson(rjsonString);
  assert.equal(json.toString(), expected)
}
