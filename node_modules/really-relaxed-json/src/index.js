/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2022 TwelveTone LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
const theModule = require('./umd.bundle.js');
const thePackage = theModule.tv.twelvetone.rjson;

// Pull options out of Companion
const Options = thePackage.PrettyPrinter.Options;
Options.JsonCompact = Options.Companion.JsonCompact;
Options.JsonPretty = Options.Companion.JsonPretty;
Options.RJsonCompact = Options.Companion.RJsonCompact;
Options.RJsonPretty = Options.Companion.RJsonPretty;
Options.JsCompact = Options.Companion.JsCompact;
Options.JsPretty = Options.Companion.JsPretty;

module.exports = {
    createParser: () => thePackage.RJsonParserFactory.Companion.getDefault().createParser(),
    createParserFactory: () => thePackage.RJsonParserFactory.Companion.getDefault(),

    PrettyPrinter: thePackage.PrettyPrinter,
    /**
     * @deprecated since 0.1.0.  Use toJson() instead.
     * @param rjsonString {String}
     * @returns {String}
     */
    convert: function (rjsonString) {
        const parser = thePackage.RJsonParserFactory.Companion.getDefault().createParser();
        return parser.stringToJson(rjsonString);
    },
    /**
     *
     * @param rjsonString {String}
     * @param compact {Boolean}
     * @returns {String}
     */
    toJson: function (rjsonString, compact = true) {
        const parser = thePackage.RJsonParserFactory.Companion.getDefault().createParser();
        const value = parser.stringToValue(rjsonString);
        let opts;
        if (compact) {
            opts = thePackage.PrettyPrinter.Options.Companion.JsonCompact;
        } else {
            opts = thePackage.PrettyPrinter.Options.Companion.JsonPretty;
        }
        const printer = new thePackage.PrettyPrinter(opts);
        return printer.valueToString(value);
    },
    /**
     *
     * @param rjsonString {String}
     * @param compact {Boolean}
     * @returns {String}
     */
    toRJson: function (jsonString, compact = true) {
        const parser = thePackage.RJsonParserFactory.Companion.getDefault().createParser();
        const value = parser.stringToValue(jsonString);
        let opts;
        if (compact) {
            opts = thePackage.PrettyPrinter.Options.Companion.RJsonCompact;
        } else {
            opts = thePackage.PrettyPrinter.Options.Companion.RJsonPretty;
        }
        const printer = new thePackage.PrettyPrinter(opts);
        return printer.valueToString(value);
    },
    /**
     *
     * @param rjsonString {String}
     * @param compact {Boolean}
     * @returns {String}
     */
    toJs: function (rjsonString, compact = true) {
        const parser = thePackage.RJsonParserFactory.Companion.getDefault().createParser();
        const value = parser.stringToValue(rjsonString);
        let opts;
        if (compact) {
            opts = thePackage.PrettyPrinter.Options.Companion.JsCompact;
        } else {
            opts = thePackage.PrettyPrinter.Options.Companion.JsPretty;
        }
        const printer = new thePackage.PrettyPrinter(opts);
        return printer.valueToString(value);
    },

    /**
     *
     * @param options {Options} PrettyPrinter options
     * @param stringOrValue {string|object} a JsonLike string or JsonValue
     * @returns {string}
     */
    prettyPrint: function (options, stringOrValue) {
        const prettyPrinter = new thePackage.PrettyPrinter(options);
        if (typeof stringOrValue === 'string') {
            return prettyPrinter.stringToString(stringOrValue);
        } else {
            return prettyPrinter.valueToString(stringOrValue);
        }
    },

    api: theModule,
    PrettyPrinter: thePackage.PrettyPrinter,
    Options,

};

module.exports.default = module.exports;
